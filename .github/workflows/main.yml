name: 'CI Build'

on:
  workflow_dispatch:

env:
  SL_OBS_VERSION: ${{ github.ref_name }}
  GRPC_VERSION: v1.58.0
  AWS_SYMB_ACCESS_KEY_ID: ${{secrets.AWS_SYMB_ACCESS_KEY_ID}}
  AWS_SYMB_SECRET_ACCESS_KEY: ${{secrets.AWS_SYMB_SECRET_ACCESS_KEY}}
  AWS_RELEASE_ACCESS_KEY_ID: ${{secrets.AWS_RELEASE_ACCESS_KEY_ID}}
  AWS_RELEASE_SECRET_ACCESS_KEY: ${{secrets.AWS_RELEASE_SECRET_ACCESS_KEY}}
  RELEASE_BUCKET: "slobs-cdn.streamlabs.com/obsplugin/intermediary_packages/"

jobs:
  win64_build:
    name: 'Windows 64-bit'
    runs-on: windows-latest
    strategy:
      matrix:
        ReleaseName: [release]
        include:
          - ReleaseName: release
            ReleaseConfig: RelWithDebInfo
    env:
      OS_TAG: "win64"
    steps:
      - name: Setup cmake
        uses: jwlawson/actions-setup-cmake@v1.14
        with:
          cmake-version: '3.28.x'

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run build script
        run: powershell -File ./ci/pipeline.ps1 "${{ github.workspace }}" "${{ github.sha }}"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{secrets.AWS_RELEASE_ACCESS_KEY_ID}}
          aws-secret-access-key: ${{secrets.AWS_RELEASE_SECRET_ACCESS_KEY}}
          aws-region: us-west-2

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: unsigned_archive
          path: ${{ github.workspace }}/slplugin-${{ env.SL_OBS_VERSION }}-${{ github.sha }}.zip

  sign_binaries:
    name: Sign Binaries
    runs-on: signing
    environment: Release
    needs: [win64_build]
    steps:
      - name: List existing files
        run: |
          Get-ChildItem -Force

      - name: Clean workspace
        run: |
          echo "Cleaning workspace..."
          Remove-Item * -Recurse -Force -ErrorAction SilentlyContinue
          Remove-Item .* -Recurse -Force -ErrorAction SilentlyContinue

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download Archive
        uses: actions/download-artifact@v4
        with:
          name: unsigned_archive
          path: .

      - name: Extract archive
        shell: powershell
        run: Expand-Archive -Path slplugin-${{ env.SL_OBS_VERSION }}-${{ github.sha }}.zip -DestinationPath archive

      - name: List files
        run: |
          Get-ChildItem -Force -Recurse

      - name: Sign binaries
        run: |
          Get-ChildItem -Path archive -Recurse -File | Where-Object { @(".exe", ".dll").Contains($_.Extension) } | ForEach-Object { logisign client --client logitech-cpg-sign-client --app streamlabs --files $_.FullName }

      - name: Clean files
        run: |
          Get-ChildItem -Path archive -Recurse -File | Where-Object { -not @(".exe", ".dll", ".png").Contains($_.Extension) } | Remove-Item -Force

      - name: Create signed archive
        shell: powershell
        run: Compress-Archive -Path archive/* -DestinationPath slplugin-${{ env.SL_OBS_VERSION }}-${{ github.sha }}-signed-files.zip -Force

      - name: Upload signed files
        uses: actions/upload-artifact@v4
        with:
          name: signed_files
          path: slplugin-${{ env.SL_OBS_VERSION }}-${{ github.sha }}-signed-files.zip

  build_installer:
    name: Build Installer
    runs-on: windows-latest
    needs: [sign_binaries]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install NSIS
        run: |
          choco install nsis -y
        env:
          ChocolateyInstall: C:\ProgramData\chocolatey

      - name: Download signed files
        uses: actions/download-artifact@v4
        with:
          name: signed_files
          path: .

      - name: Extract signed files
        shell: powershell
        run: Expand-Archive -Path slplugin-${{ env.SL_OBS_VERSION }}-${{ github.sha }}-signed-files.zip -DestinationPath archive

      - name: List files
        run: |
          Get-ChildItem -Force -Recurse

      - name: Make installer
        shell: powershell
        run: ./ci/make_installer.ps1 "${{ env.SL_OBS_VERSION }}" "${{ github.sha }}"

      - name: Upload unsigned installer
        uses: actions/upload-artifact@v4
        with:
          name: unsigned_installer
          path: nsis/slplugin-${{ env.SL_OBS_VERSION }}-${{ github.sha }}-signed.exe

  sign_installer:
    name: Sign Installer
    runs-on: signing
    environment: Release
    needs: [build_installer]
    steps:
      - name: Clean workspace
        run: |
          echo "Cleaning workspace..."
          Remove-Item * -Recurse -Force -ErrorAction SilentlyContinue
          Remove-Item .* -Recurse -Force -ErrorAction SilentlyContinue

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download unsigned installer
        uses: actions/download-artifact@v4
        with:
          name: unsigned_installer
          path: .

      - name: List files
        run: |
          Get-ChildItem -Force -Recurse

      - name: Sign installer
        run: |
          logisign client --client logitech-cpg-sign-client --app streamlabs --files slplugin-${{ env.SL_OBS_VERSION }}-${{ github.sha }}-signed.exe

      - name: Make signed zip
        shell: powershell
        run: ./ci/make_signed_zip.ps1 "${{ env.SL_OBS_VERSION }}" "${{ github.sha }}"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{secrets.AWS_RELEASE_ACCESS_KEY_ID}}
          aws-secret-access-key: ${{secrets.AWS_RELEASE_SECRET_ACCESS_KEY}}
          aws-region: us-west-2

      - name: Upload zip to AWS Intermediary
        run: aws s3 cp slplugin-${{env.SL_OBS_VERSION}}-${{ github.sha }}-signed.zip s3://${{env.RELEASE_BUCKET}} --acl public-read

      - name: Upload installer to AWS Intermediary
        run: aws s3 cp slplugin-${{env.SL_OBS_VERSION}}-${{ github.sha }}-signed.exe s3://${{env.RELEASE_BUCKET}} --acl public-read