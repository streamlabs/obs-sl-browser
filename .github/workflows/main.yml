name: 'CI Build'

on:
  workflow_dispatch:

env:
  SL_OBS_VERSION: ${{ github.ref_name }}
  GRPC_VERSION: v1.58.0
  AWS_SYMB_ACCESS_KEY_ID: ${{secrets.AWS_SYMB_ACCESS_KEY_ID}}
  AWS_SYMB_SECRET_ACCESS_KEY: ${{secrets.AWS_SYMB_SECRET_ACCESS_KEY}}
  AWS_RELEASE_ACCESS_KEY_ID: ${{secrets.AWS_RELEASE_ACCESS_KEY_ID}}
  AWS_RELEASE_SECRET_ACCESS_KEY: ${{secrets.AWS_RELEASE_SECRET_ACCESS_KEY}}
  RELEASE_BUCKET: "slobs-cdn.streamlabs.com/obsplugin/intermediary_packages/"

jobs:
  win64_build:
    name: 'Windows 64-bit'
    runs-on: windows-latest
    strategy:
      matrix:
        ReleaseName: [release]
        include:
          - ReleaseName: release
            ReleaseConfig: RelWithDebInfo
    env:
      OS_TAG: "win64"
    steps:
      - name: Setup cmake
        uses: jwlawson/actions-setup-cmake@v1.14
        with:
          cmake-version: '3.28.x'

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run build script
        run: powershell -File ./ci/pipeline.ps1 "${{ github.workspace }}" "${{ github.sha }}"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{secrets.AWS_RELEASE_ACCESS_KEY_ID}}
          aws-secret-access-key: ${{secrets.AWS_RELEASE_SECRET_ACCESS_KEY}}
          aws-region: us-west-2

      - name: Stage archive folder for artifact
        shell: pwsh
        run: |
          $src = "${{ github.workspace }}\..\${{ github.sha }}\build_x64\plugins\obs-sl-browser\RelWithDebInfo"
          if (!(Test-Path $src)) { throw "Archive source not found: $src" }
          Copy-Item -Recurse -Force $src "$env:GITHUB_WORKSPACE\archive"

      - name: Upload unsigned archive (folder)
        uses: actions/upload-artifact@v4
        with:
          name: unsigned_archive
          path: ${{ github.workspace }}\archive\
  sign_binaries:
    name: Sign binaries (only)
    runs-on: signing
    needs: win64_build
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download unsigned archive
        uses: actions/download-artifact@v4
        with:
          name: unsigned_archive
          path: archive

      - name: List before signing (debug)
        shell: pwsh
        run: Get-ChildItem -Recurse -File archive | Select-Object FullName

      - name: Sign .exe/.dll with logisign
        shell: pwsh
        run: |
          $files = Get-ChildItem -Path archive -Recurse -File -Include *.exe,*.dll
          if ($files.Count -eq 0) { throw "No signable files found in archive" }
          $files | ForEach-Object {
            logisign client --client logitech-cpg-sign-client --app streamlabs --files $_.FullName
            if ($LASTEXITCODE -ne 0) { throw "logisign failed for $($_.FullName) with $LASTEXITCODE" }
          }

      - name: Upload signed archive (folder)
        uses: actions/upload-artifact@v4
        with:
          name: signed_archive
          path: archive\

  package_and_publish:
    name: Package & Publish
    runs-on: windows-latest
    needs: sign_binaries
    env:
      SL_OBS_VERSION: ${{ env.SL_OBS_VERSION }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download signed archive
        uses: actions/download-artifact@v4
        with:
          name: signed_archive
          path: archive

      - name: Install NSIS + AWS CLI (if missing)
        shell: pwsh
        run: |
          choco install nsis -y
          choco install awscli -y

      - name: Build installer
        shell: pwsh
        run: ./ci/make_installer.ps1 "${{ env.SL_OBS_VERSION }}" "${{ github.sha }}"

      - name: Create signed .zip (no 7z needed)
        shell: pwsh
        run: ./ci/make_signed_zip.ps1 "${{ env.SL_OBS_VERSION }}" "${{ github.sha }}"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_RELEASE_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_RELEASE_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: Upload to AWS Intermediary
        shell: pwsh
        run: |
          aws s3 cp "slplugin-${{ env.SL_OBS_VERSION }}-${{ github.sha }}-signed.zip" s3://${{ env.RELEASE_BUCKET }} --acl public-read
          aws s3 cp "slplugin-${{ env.SL_OBS_VERSION }}-${{ github.sha }}-signed.exe" s3://${{ env.RELEASE_BUCKET }} --acl public-read
            